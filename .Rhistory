na.count$column_name[i] <- colnames(rollingsales_manhattan)[i]
na.count$count_of_NA[i] <- sum(is.na(rollingsales_manhattan[,i]))
na.count$pct_of_missing_values[i] <- ((na.count$count_of_NA[i])/23757)*100
}
```
From the table na.count we can see that 80% of the data is NA in land square feet and gross square feet
50% of the data is NA in Apartment number
# question 1 - b: Comparison of central tendency and Sd across neighbourhood
Calculating mean accross neigbourhoods
```{r}
neighbourhoods_mean <- data.frame(neighbourhoods = unique(rollingsales_manhattan$NEIGHBORHOOD))
for (i in 1:38)
{
neighbourhoods_mean$mean_sale_price[i] <- mean(rollingsales_manhattan$SALE.PRICE[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_mean$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_mean$mean_Commercial_units[i] <- mean(rollingsales_manhattan$COMMERCIAL.UNITS[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_mean$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_mean$mean_Residential_units[i] <- mean(rollingsales_manhattan$RESIDENTIAL.UNITS[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_mean$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_mean$mean_Land_Square_feet[i] <- mean(rollingsales_manhattan$LAND.SQUARE.FEET[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_mean$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_mean$mean_built_square_feet[i] <- mean(rollingsales_manhattan$GROSS.SQUARE.FEET[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_mean$neighbourhoods[i]],na.rm = TRUE)
}
```
Calculating median value of numeric variables accorss
```{r}
neighbourhoods_median <- data.frame(neighbourhoods = unique(rollingsales_manhattan$NEIGHBORHOOD))
for (i in 1:38)
{
neighbourhoods_median$median_sale_price[i] <- median(rollingsales_manhattan$SALE.PRICE[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_median$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_median$median_Commercial_units[i] <- median(rollingsales_manhattan$COMMERCIAL.UNITS[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_median$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_median$median_Residential_units[i] <- median(rollingsales_manhattan$RESIDENTIAL.UNITS[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_median$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_median$median_Land_Square_feet[i] <- median(rollingsales_manhattan$LAND.SQUARE.FEET[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_median$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_median$median_built_square_feet[i] <- median(rollingsales_manhattan$GROSS.SQUARE.FEET[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_median$neighbourhoods[i]],na.rm = TRUE)
}
```
calculating variance by neighbourhoods
```{r}
neighbourhoods_var <- data.frame(neighbourhoods = unique(rollingsales_manhattan$NEIGHBORHOOD))
for (i in 1:38)
{
neighbourhoods_var$var_sale_price[i] <- var(rollingsales_manhattan$SALE.PRICE[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_var$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_var$var_Commercial_units[i] <- var(rollingsales_manhattan$COMMERCIAL.UNITS[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_var$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_var$var_Residential_units[i] <- var(rollingsales_manhattan$RESIDENTIAL.UNITS[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_var$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_var$var_Land_Square_feet[i] <- var(rollingsales_manhattan$LAND.SQUARE.FEET[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_var$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_var$var_built_square_feet[i] <- var(rollingsales_manhattan$GROSS.SQUARE.FEET[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_var$neighbourhoods[i]],na.rm = TRUE)
}
```
calculating SD by neighbourhoods
```{r}
neighbourhoods_sd <- data.frame(neighbourhoods = unique(rollingsales_manhattan$NEIGHBORHOOD))
for (i in 1:38)
{
neighbourhoods_sd$sd_sale_price[i] <- sd(rollingsales_manhattan$SALE.PRICE[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_sd$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_sd$sd_Commercial_units[i] <- sd(rollingsales_manhattan$COMMERCIAL.UNITS[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_sd$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_sd$sd_Residential_units[i] <- sd(rollingsales_manhattan$RESIDENTIAL.UNITS[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_sd$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_sd$sd_Land_Square_feet[i] <- sd(rollingsales_manhattan$LAND.SQUARE.FEET[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_sd$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_sd$sd_built_square_feet[i] <- sd(rollingsales_manhattan$GROSS.SQUARE.FEET[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_sd$neighbourhoods[i]],na.rm = TRUE)
}
```
Comparison across time
```{r}
plot(rollingsales_manhattan$SALE.DATE,rollingsales_manhattan$SALE.PRICE)
```
# question 2
a) use regression model
```{r}
model_lm <- lm(SALE.PRICE ~ GROSS.SQUARE.FEET+LAND.SQUARE.FEET+ factor(NEIGHBORHOOD)*factor(BUILDING.CLASS.CATEGORY), data = rollingsales_manhattan)
#since the variables are all highly correlated, we can use multi variable regression to understand the impact of these variables on the sales price
# we have included the size of the unit and multiplyed the factors neighborhood and building class category to get a high r squared value
summary(model_lm)
plot(resid(model_lm))
```
c) predict k nearest neighbour
```{r}
Sales_manhattan <- rollingsales_manhattan[which(rollingsales_manhattan$GROSS.SQUARE.FEET > 0 & rollingsales_manhattan$LAND.SQUARE.FEET >0&rollingsales_manhattan$SALE.PRICE > 0),]
Sales_manhattan_1 <- Sales_manhattan[,c(1,9,14,13,15)]
ctrl <- trainControl(method="repeatedcv",repeats = 10)
fit <- train(NEIGHBORHOOD~ ., data = Sales_manhattan_1,trControl = ctrl, method = "knn")
```
## Question 2d : here we report and visualize the data
```{r}
fit
plot(fit)
```
From the above analysis we get highest accuracy for k = 7 value hence wen use 7NN model for predicting neighbourhood
## Question 3 A:
```{r}
#we perform scaling on the variables to perform PCA
scaled_sales <- data.frame(scale(Sales_manhattan[,c(13,14,18)], scale = TRUE))
# we perform PCA analyses on the data
PC = prcomp(~GROSS.SQUARE.FEET+LAND.SQUARE.FEET+SALE.PRICE,data=scaled_sales,na.action =na.omit,)
str(PC)
summary(PC)
predict(PC)
plot(PC,type="l")
```
## Question 3 B
```{r}
# first we plot the first two vectors
scr=as.matrix(scaled_sales[,c(1:3)])%*%PC$rot[,1:2]
plot(scr)
#now we plot the first and third vector
scr_1=as.matrix(scaled_sales[,c(1:3)])%*%PC$rot[,c(1,3)]
plot(scr_1)
#we can visualize the 3 vectors using an inbuilt function of r biplot
biplot(PC)
fit
summary(fit)
summary(PC)
str(PC)
PC$rotation
plot(scr)
scr_1=as.matrix(scaled_sales[,c(1:3)])%*%PC$rot[,c(1,3)]
scr_1=as.matrix(scaled_sales[,c(1:3)])%*%PC$rot[,c(1,3)]
plot(scr_1)
biplot(PC)
View(neighbourhoods_mean)
View(neighbourhoods_mean)
View(neighbourhoods_mean)
View(neighbourhoods_median)
View(neighbourhoods_var)
View(neighbourhoods_mean)
View(neighbourhoods_median)
View(neighbourhoods_mean)
plot(rollingsales_manhattan$SALE.DATE,rollingsales_manhattan$SALE.PRICE)
View(Sales_manhattan_1)
View(Sales_manhattan_1)
View(Sales_manhattan)
plot(scr)
points(scr_1)
plot(scr, col = "red")
points(scr_1,col = "blue")
# first we plot the first two vectors
plot(scr, col = "red")
#now we plot the first and third vector
plot(scr_1,col = "blue")
#we can superimpose the plots
plot(scr, col = "red")
points(scr_1,col = "blue")
PC$sdev
plot(scr, col = PC$sdev[1])
plot(scr_1,col = "blue")
plot(scr_1,col = PC$sdev[3])
plot(scr_1,col = PC$sdev[3])
plot(scr, col = PC$sdev[1])
scr_1=as.matrix(scaled_sales[,c(1:3)])%*%PC$rot[,c(1,3)]
plot(scr_1,col = PC$sdev[3])
plot(scr, col= ifelse(scr >= PC$sdev[1], "red")
plot(scr, col= ifelse(scr >= PC$sdev[1]), "red")
plot(scr, col= ifelse(scr >= PC$sdev[1]))
plot(scr, col= ifelse(scr >= PC$sdev[1], "red"))
plot(scr, col= ifelse(scr >= PC$sdev[1], "red",ifelse(cn <= 1,"blue", "black"))
plot(scr, col= ifelse(scr >= PC$sdev[1], "red",ifelse(scr <= PC$sdev[1],"blue", "black"))
plot(scr, col= ifelse(scr >= PC$sdev[1], "red",ifelse(scr <= PC$sdev[1],"blue", "black")))
plot(scr_1,col= ifelse(scr_1 >= PC$sdev[1], "red",ifelse(scr_1 <= PC$sdev[1],"blue", "black")))
install.packages("caret")
library('base')
library('dplyr')
library('eeptools')
library('taRifx')
library('caret')
require('caret')
?trainControl
---
title: 'Assignment #3'
author: "Vishesh Kakarala"
date: "March 10, 2016"
output: html_document
---
install.packages("caret")
library('base')
library('dplyr')
library('eeptools')
library('taRifx')
library('caret')
require('caret')
Loading the data and viewing the structure of the data loaded
```{r}
rollingsales_manhattan <- read.csv("~/assignment 3/rollingsales_manhattan_csv.csv", header=TRUE, skip = 4, colClasses = c("NEIGHBORHOOD" = "character", "ADDRESS" = "character","APARTMENT.NUMBER" = "character","LAND.SQUARE.FEET" = "character","GROSS.SQUARE.FEET" = "character","TAX.CLASS.AT.TIME.OF.SALE" = "factor","SALE.PRICE" = "character"))
str(rollingsales_manhattan)
```
#question 1
## Q1 - a : Data Cleaning
```{R}
#change sale date to date format
rollingsales_manhattan$SALE.DATE <- as.Date(rollingsales_manhattan$SALE.DATE, format = "%m/%d/%Y")
#change sale price to number format
rollingsales_manhattan$SALE.PRICE <- gsub(",","",rollingsales_manhattan$SALE.PRICE)
rollingsales_manhattan$SALE.PRICE <- as.numeric(rollingsales_manhattan$SALE.PRICE)
#change land square feet to number format
rollingsales_manhattan$LAND.SQUARE.FEET <- gsub(",","",rollingsales_manhattan$LAND.SQUARE.FEET)
rollingsales_manhattan$LAND.SQUARE.FEET <- as.numeric(rollingsales_manhattan$LAND.SQUARE.FEET)
#change gross square feet to number format
rollingsales_manhattan$GROSS.SQUARE.FEET <- gsub(",","",rollingsales_manhattan$GROSS.SQUARE.FEET)
rollingsales_manhattan$GROSS.SQUARE.FEET <- as.numeric(rollingsales_manhattan$GROSS.SQUARE.FEET)
#change neighbourhood to factor
rollingsales_manhattan <- rollingsales_manhattan[-which(rollingsales_manhattan$NEIGHBORHOOD == "MANHATTAN-UNKNOWN        "),]
rollingsales_manhattan$NEIGHBORHOOD <- as.factor(rollingsales_manhattan$NEIGHBORHOOD)
# Since we are using only data from the borough of manhattan we can remove the borough column from the data
rollingsales_manhattan <- rollingsales_manhattan[,-1]
# There are no values in Ease.Ment we can remove that column
summary(rollingsales_manhattan$EASE.MENT)
rollingsales_manhattan <- rollingsales_manhattan[,-6]
```
Now we can review the structure again to check if all the desired changes have been made
```{r}
str(rollingsales_manhattan)
```
Now we can replace NULL values with NA for statistical analysis
```{r}
# Replacing blank cells in Apartment number with NA values
rollingsales_manhattan$APARTMENT.NUMBER <- data.frame(gsub("            ",NA,rollingsales_manhattan$APARTMENT.NUMBER, fixed = TRUE))
colnames(rollingsales_manhattan[,8]) <- "APARTMENT.NUMBER"
rollingsales_manhattan$APARTMENT.NUMBER <- as.character(rollingsales_manhattan$APARTMENT.NUMBER)
#Replcaing Land square feet missing values with NA
rollingsales_manhattan$LAND.SQUARE.FEET[rollingsales_manhattan$LAND.SQUARE.FEET == 0] <-NA
#Replcaing gross square feet missing values with NA
rollingsales_manhattan$GROSS.SQUARE.FEET[rollingsales_manhattan$GROSS.SQUARE.FEET == 0] <-NA
#Replacing Year built missing values with NA
rollingsales_manhattan$YEAR.BUILT[rollingsales_manhattan$YEAR.BUILT == 0] <- NA
#We replace total units with 0 value as NA and only replace those values in residential and commercial units corresponding to NA total unit values
rollingsales_manhattan$RESIDENTIAL.UNITS[rollingsales_manhattan$TOTAL.UNITS == 0] <- NA
rollingsales_manhattan$COMMERCIAL.UNITS[rollingsales_manhattan$TOTAL.UNITS == 0] <- NA
rollingsales_manhattan$TOTAL.UNITS[rollingsales_manhattan$TOTAL.UNITS == 0] <- NA
```
Checking for outliers in sales price
```{r}
plot(rollingsales_manhattan$SALE.PRICE)
#there are very few outliers in the sales price data
```
checking for outliers in land square feet
```{r}
plot(rollingsales_manhattan$LAND.SQUARE.FEET)
```
checking for outliers in gross square feet
```{r}
plot(rollingsales_manhattan$GROSS.SQUARE.FEET)
```
we check for the amount of information availble in each column
```{r}
na.count <- data.frame(c(1:19))
colnames(na.count) <- "column_name"
for(i in 1:19)
{
na.count$column_name[i] <- colnames(rollingsales_manhattan)[i]
na.count$count_of_NA[i] <- sum(is.na(rollingsales_manhattan[,i]))
na.count$pct_of_missing_values[i] <- ((na.count$count_of_NA[i])/23757)*100
}
```
From the table na.count we can see that 80% of the data is NA in land square feet and gross square feet
50% of the data is NA in Apartment number
## question 1 - b: Comparison of central tendency and Sd across neighbourhood
Calculating mean accross neigbourhoods
```{r}
neighbourhoods_mean <- data.frame(neighbourhoods = unique(rollingsales_manhattan$NEIGHBORHOOD))
for (i in 1:38)
{
neighbourhoods_mean$mean_sale_price[i] <- mean(rollingsales_manhattan$SALE.PRICE[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_mean$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_mean$mean_Commercial_units[i] <- mean(rollingsales_manhattan$COMMERCIAL.UNITS[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_mean$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_mean$mean_Residential_units[i] <- mean(rollingsales_manhattan$RESIDENTIAL.UNITS[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_mean$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_mean$mean_Land_Square_feet[i] <- mean(rollingsales_manhattan$LAND.SQUARE.FEET[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_mean$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_mean$mean_built_square_feet[i] <- mean(rollingsales_manhattan$GROSS.SQUARE.FEET[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_mean$neighbourhoods[i]],na.rm = TRUE)
}
```
Calculating median value of numeric variables accorss
```{r}
neighbourhoods_median <- data.frame(neighbourhoods = unique(rollingsales_manhattan$NEIGHBORHOOD))
for (i in 1:38)
{
neighbourhoods_median$median_sale_price[i] <- median(rollingsales_manhattan$SALE.PRICE[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_median$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_median$median_Commercial_units[i] <- median(rollingsales_manhattan$COMMERCIAL.UNITS[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_median$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_median$median_Residential_units[i] <- median(rollingsales_manhattan$RESIDENTIAL.UNITS[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_median$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_median$median_Land_Square_feet[i] <- median(rollingsales_manhattan$LAND.SQUARE.FEET[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_median$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_median$median_built_square_feet[i] <- median(rollingsales_manhattan$GROSS.SQUARE.FEET[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_median$neighbourhoods[i]],na.rm = TRUE)
}
```
calculating variance by neighbourhoods
```{r}
neighbourhoods_var <- data.frame(neighbourhoods = unique(rollingsales_manhattan$NEIGHBORHOOD))
for (i in 1:38)
{
neighbourhoods_var$var_sale_price[i] <- var(rollingsales_manhattan$SALE.PRICE[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_var$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_var$var_Commercial_units[i] <- var(rollingsales_manhattan$COMMERCIAL.UNITS[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_var$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_var$var_Residential_units[i] <- var(rollingsales_manhattan$RESIDENTIAL.UNITS[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_var$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_var$var_Land_Square_feet[i] <- var(rollingsales_manhattan$LAND.SQUARE.FEET[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_var$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_var$var_built_square_feet[i] <- var(rollingsales_manhattan$GROSS.SQUARE.FEET[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_var$neighbourhoods[i]],na.rm = TRUE)
}
```
calculating SD by neighbourhoods
```{r}
neighbourhoods_sd <- data.frame(neighbourhoods = unique(rollingsales_manhattan$NEIGHBORHOOD))
for (i in 1:38)
{
neighbourhoods_sd$sd_sale_price[i] <- sd(rollingsales_manhattan$SALE.PRICE[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_sd$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_sd$sd_Commercial_units[i] <- sd(rollingsales_manhattan$COMMERCIAL.UNITS[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_sd$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_sd$sd_Residential_units[i] <- sd(rollingsales_manhattan$RESIDENTIAL.UNITS[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_sd$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_sd$sd_Land_Square_feet[i] <- sd(rollingsales_manhattan$LAND.SQUARE.FEET[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_sd$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_sd$sd_built_square_feet[i] <- sd(rollingsales_manhattan$GROSS.SQUARE.FEET[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_sd$neighbourhoods[i]],na.rm = TRUE)
}
```
we analyze the data across neighbourhoods
Mean sale price is highest in Fashion district and kips bay when compared to the mean of Manhattan
There is high variance in sale price in the kips bay neighbourhood
there is a high number of residential units in Javits center when compared to the rest of manhattan
Comparison across time
```{r}
#we plot the sale price accross time to understand price distribution accross time
plot(rollingsales_manhattan$SALE.DATE,rollingsales_manhattan$SALE.PRICE)
# there are a few outliers in the period from December to March, we will need to see the sales data for more than one year to understand if there is a seasonal trend
```
#Question 2
## question 2 a) use regression model
```{r}
model_lm <- lm(SALE.PRICE ~ GROSS.SQUARE.FEET+LAND.SQUARE.FEET+ factor(NEIGHBORHOOD)*factor(BUILDING.CLASS.CATEGORY), data = rollingsales_manhattan)
install.packages("caret")
---
title: 'Assignment #3'
author: "Vishesh Kakarala"
date: "March 10, 2016"
output: html_document
---
library('base')
library('dplyr')
library('eeptools')
library('taRifx')
library('caret')
Loading the data and viewing the structure of the data loaded
```{r}
rollingsales_manhattan <- read.csv("~/assignment 3/rollingsales_manhattan_csv.csv", header=TRUE, skip = 4, colClasses = c("NEIGHBORHOOD" = "character", "ADDRESS" = "character","APARTMENT.NUMBER" = "character","LAND.SQUARE.FEET" = "character","GROSS.SQUARE.FEET" = "character","TAX.CLASS.AT.TIME.OF.SALE" = "factor","SALE.PRICE" = "character"))
str(rollingsales_manhattan)
```
#question 1
## Q1 - a : Data Cleaning
```{R}
#change sale date to date format
rollingsales_manhattan$SALE.DATE <- as.Date(rollingsales_manhattan$SALE.DATE, format = "%m/%d/%Y")
#change sale price to number format
rollingsales_manhattan$SALE.PRICE <- gsub(",","",rollingsales_manhattan$SALE.PRICE)
rollingsales_manhattan$SALE.PRICE <- as.numeric(rollingsales_manhattan$SALE.PRICE)
#change land square feet to number format
rollingsales_manhattan$LAND.SQUARE.FEET <- gsub(",","",rollingsales_manhattan$LAND.SQUARE.FEET)
rollingsales_manhattan$LAND.SQUARE.FEET <- as.numeric(rollingsales_manhattan$LAND.SQUARE.FEET)
#change gross square feet to number format
rollingsales_manhattan$GROSS.SQUARE.FEET <- gsub(",","",rollingsales_manhattan$GROSS.SQUARE.FEET)
rollingsales_manhattan$GROSS.SQUARE.FEET <- as.numeric(rollingsales_manhattan$GROSS.SQUARE.FEET)
#change neighbourhood to factor
rollingsales_manhattan <- rollingsales_manhattan[-which(rollingsales_manhattan$NEIGHBORHOOD == "MANHATTAN-UNKNOWN        "),]
rollingsales_manhattan$NEIGHBORHOOD <- as.factor(rollingsales_manhattan$NEIGHBORHOOD)
# Since we are using only data from the borough of manhattan we can remove the borough column from the data
rollingsales_manhattan <- rollingsales_manhattan[,-1]
# There are no values in Ease.Ment we can remove that column
summary(rollingsales_manhattan$EASE.MENT)
rollingsales_manhattan <- rollingsales_manhattan[,-6]
```
Now we can review the structure again to check if all the desired changes have been made
```{r}
str(rollingsales_manhattan)
```
Now we can replace NULL values with NA for statistical analysis
```{r}
# Replacing blank cells in Apartment number with NA values
rollingsales_manhattan$APARTMENT.NUMBER <- data.frame(gsub("            ",NA,rollingsales_manhattan$APARTMENT.NUMBER, fixed = TRUE))
colnames(rollingsales_manhattan[,8]) <- "APARTMENT.NUMBER"
rollingsales_manhattan$APARTMENT.NUMBER <- as.character(rollingsales_manhattan$APARTMENT.NUMBER)
#Replcaing Land square feet missing values with NA
rollingsales_manhattan$LAND.SQUARE.FEET[rollingsales_manhattan$LAND.SQUARE.FEET == 0] <-NA
#Replcaing gross square feet missing values with NA
rollingsales_manhattan$GROSS.SQUARE.FEET[rollingsales_manhattan$GROSS.SQUARE.FEET == 0] <-NA
#Replacing Year built missing values with NA
rollingsales_manhattan$YEAR.BUILT[rollingsales_manhattan$YEAR.BUILT == 0] <- NA
#We replace total units with 0 value as NA and only replace those values in residential and commercial units corresponding to NA total unit values
rollingsales_manhattan$RESIDENTIAL.UNITS[rollingsales_manhattan$TOTAL.UNITS == 0] <- NA
rollingsales_manhattan$COMMERCIAL.UNITS[rollingsales_manhattan$TOTAL.UNITS == 0] <- NA
rollingsales_manhattan$TOTAL.UNITS[rollingsales_manhattan$TOTAL.UNITS == 0] <- NA
```
Checking for outliers in sales price
```{r}
plot(rollingsales_manhattan$SALE.PRICE)
#there are very few outliers in the sales price data
```
checking for outliers in land square feet
```{r}
plot(rollingsales_manhattan$LAND.SQUARE.FEET)
```
checking for outliers in gross square feet
```{r}
plot(rollingsales_manhattan$GROSS.SQUARE.FEET)
```
we check for the amount of information availble in each column
```{r}
na.count <- data.frame(c(1:19))
colnames(na.count) <- "column_name"
for(i in 1:19)
{
na.count$column_name[i] <- colnames(rollingsales_manhattan)[i]
na.count$count_of_NA[i] <- sum(is.na(rollingsales_manhattan[,i]))
na.count$pct_of_missing_values[i] <- ((na.count$count_of_NA[i])/23757)*100
}
```
From the table na.count we can see that 80% of the data is NA in land square feet and gross square feet
50% of the data is NA in Apartment number
## question 1 - b: Comparison of central tendency and Sd across neighbourhood
Calculating mean accross neigbourhoods
```{r}
neighbourhoods_mean <- data.frame(neighbourhoods = unique(rollingsales_manhattan$NEIGHBORHOOD))
for (i in 1:38)
{
neighbourhoods_mean$mean_sale_price[i] <- mean(rollingsales_manhattan$SALE.PRICE[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_mean$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_mean$mean_Commercial_units[i] <- mean(rollingsales_manhattan$COMMERCIAL.UNITS[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_mean$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_mean$mean_Residential_units[i] <- mean(rollingsales_manhattan$RESIDENTIAL.UNITS[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_mean$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_mean$mean_Land_Square_feet[i] <- mean(rollingsales_manhattan$LAND.SQUARE.FEET[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_mean$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_mean$mean_built_square_feet[i] <- mean(rollingsales_manhattan$GROSS.SQUARE.FEET[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_mean$neighbourhoods[i]],na.rm = TRUE)
}
```
Calculating median value of numeric variables accorss
```{r}
neighbourhoods_median <- data.frame(neighbourhoods = unique(rollingsales_manhattan$NEIGHBORHOOD))
for (i in 1:38)
{
neighbourhoods_median$median_sale_price[i] <- median(rollingsales_manhattan$SALE.PRICE[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_median$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_median$median_Commercial_units[i] <- median(rollingsales_manhattan$COMMERCIAL.UNITS[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_median$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_median$median_Residential_units[i] <- median(rollingsales_manhattan$RESIDENTIAL.UNITS[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_median$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_median$median_Land_Square_feet[i] <- median(rollingsales_manhattan$LAND.SQUARE.FEET[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_median$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_median$median_built_square_feet[i] <- median(rollingsales_manhattan$GROSS.SQUARE.FEET[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_median$neighbourhoods[i]],na.rm = TRUE)
}
```
calculating variance by neighbourhoods
```{r}
neighbourhoods_var <- data.frame(neighbourhoods = unique(rollingsales_manhattan$NEIGHBORHOOD))
for (i in 1:38)
{
neighbourhoods_var$var_sale_price[i] <- var(rollingsales_manhattan$SALE.PRICE[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_var$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_var$var_Commercial_units[i] <- var(rollingsales_manhattan$COMMERCIAL.UNITS[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_var$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_var$var_Residential_units[i] <- var(rollingsales_manhattan$RESIDENTIAL.UNITS[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_var$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_var$var_Land_Square_feet[i] <- var(rollingsales_manhattan$LAND.SQUARE.FEET[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_var$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_var$var_built_square_feet[i] <- var(rollingsales_manhattan$GROSS.SQUARE.FEET[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_var$neighbourhoods[i]],na.rm = TRUE)
}
```
calculating SD by neighbourhoods
```{r}
neighbourhoods_sd <- data.frame(neighbourhoods = unique(rollingsales_manhattan$NEIGHBORHOOD))
for (i in 1:38)
{
neighbourhoods_sd$sd_sale_price[i] <- sd(rollingsales_manhattan$SALE.PRICE[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_sd$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_sd$sd_Commercial_units[i] <- sd(rollingsales_manhattan$COMMERCIAL.UNITS[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_sd$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_sd$sd_Residential_units[i] <- sd(rollingsales_manhattan$RESIDENTIAL.UNITS[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_sd$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_sd$sd_Land_Square_feet[i] <- sd(rollingsales_manhattan$LAND.SQUARE.FEET[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_sd$neighbourhoods[i]],na.rm = TRUE)
neighbourhoods_sd$sd_built_square_feet[i] <- sd(rollingsales_manhattan$GROSS.SQUARE.FEET[rollingsales_manhattan$NEIGHBORHOOD == neighbourhoods_sd$neighbourhoods[i]],na.rm = TRUE)
}
```
we analyze the data across neighbourhoods
Mean sale price is highest in Fashion district and kips bay when compared to the mean of Manhattan
There is high variance in sale price in the kips bay neighbourhood
there is a high number of residential units in Javits center when compared to the rest of manhattan
Comparison across time
```{r}
#we plot the sale price accross time to understand price distribution accross time
plot(rollingsales_manhattan$SALE.DATE,rollingsales_manhattan$SALE.PRICE)
# there are a few outliers in the period from December to March, we will need to see the sales data for more than one year to understand if there is a seasonal trend
```
#Question 2
## question 2 a) use regression model
```{r}
model_lm <- lm(SALE.PRICE ~ GROSS.SQUARE.FEET+LAND.SQUARE.FEET+ factor(NEIGHBORHOOD)*factor(BUILDING.CLASS.CATEGORY), data = rollingsales_manhattan)
#since the variables are all highly correlated, we can use multi variable regression to understand the impact of these variables on the sales price
# we have included the size of the unit and multiplyed the factors neighborhood and building class category to get a high r squared value
summary(model_lm)
```
## question 2 b:Visualize the coefficients
```{r}
plot(resid(model_lm))
```
## questin 2c: predict k nearest neighbour
```{r}
Sales_manhattan <- rollingsales_manhattan[which(rollingsales_manhattan$GROSS.SQUARE.FEET > 0 & rollingsales_manhattan$LAND.SQUARE.FEET >0&rollingsales_manhattan$SALE.PRICE > 0),]
Sales_manhattan_1 <- Sales_manhattan[,c(1,9,14,13,15)]
ctrl <- trainControl(method="repeatedcv",repeats = 10)
fit <- train(NEIGHBORHOOD~ ., data = Sales_manhattan_1,trControl = ctrl, method = "knn")
#Accuracy is 44% for k=7, in kNN model with 10 fold cross validation
```
## Question 2d : here we report and visualize the data
```{r}
fit
plot(fit)
# we get accuracy of 44% when we predict neighbourhood using K=7 in 10 fold cross validation
```
## Question 2e
From the above analysis we get highest accuracy for k = 7 value hence we use 7NN model using 10 fold cross validation for predicting neighbourhood, accuracy can be improved by rerdcing the dimensions of the categorical variable we are predicting
#Question 3
## Question 3 A:
```{r}
#we perform scaling on the variables to perform PCA
scaled_sales <- data.frame(scale(Sales_manhattan[,c(13,14,18)], scale = TRUE))
# we perform PCA analyses on the data
PC = prcomp(~GROSS.SQUARE.FEET+LAND.SQUARE.FEET+SALE.PRICE,data=scaled_sales,na.action =na.omit)
str(PC)
summary(PC)
predict(PC)
plot(PC,type="l")
```
## Question 3 B
```{r}
scr=as.matrix(scaled_sales[,c(1:3)])%*%PC$rot[,1:2]
scr_1=as.matrix(scaled_sales[,c(1:3)])%*%PC$rot[,c(1,3)]
# first we plot the first two vectors
plot(scr, col= ifelse(scr >= PC$sdev[1], "red",ifelse(scr <= PC$sdev[1],"blue", "black")))
#now we plot the first and third vector
plot(scr_1,col= ifelse(scr_1 >= PC$sdev[1], "red",ifelse(scr_1 <= PC$sdev[1],"blue", "black")))
# for point greater than the Sd of PC1 we plot them red and those below Sd of PC1 we plot them blue
#we can visualize the 3 vectors using an inbuilt function of r biplot
biplot(PC)
```
install.packages("gbm.fit")
install.packages("gbm")
install.packages("stringdist")
